#!/usr/bin/env node

var dep = require('../support'),
    express = require('express'),
    AppManager = require('app-manager').AppManager,
    RepositoryListener = require('repository-listener').RepositoryListener,
    io = require('socket.io');

// TODO: fake the home directory until this goes into production
process.env.HOME = __dirname + '/../test/files/fakeHome/mike';

var webApp = express.createServer();
var port = 5542;
var events = [];
var webAppSocket;

// setup web app
webApp.use(express.bodyDecoder());
webApp.use(express.methodOverride());

var appManager = new AppManager();
var repositoryListener = new RepositoryListener(webApp, appManager);

// routing middleware
webApp.use(express.router);

// setup template engine
webApp.set('views', __dirname + '/../lib/views');
webApp.register('.html', require('ejs'));
webApp.set('view engine', 'html');

webApp.get('/', function(req, res) {
  res.render('dashboard',{
    locals: {
      events: events,
      port: port
    }
  });
});

webAppSocket = io.listen(webApp);
webAppSocket.on('connection', function(client) {});

var dumpEvent = function(module, action, app) {
  //console.log('-----------------------------------------------');
  //console.log('app: ' + app.name);
  //console.log('user: ' + app.user);
  //console.log('module: ' + module);
  //console.log('action: ' + action);
  console.log(action + ' app::' + app.name + ', user::' + app.user);
};

var processEvent = function(module, action, app) {
  var event = {
    module: module,
    action: action,
    app: {
      name: app.name,
      date: app.date
    }
  };
  webAppSocket.broadcast(event);
  events.unshift(event);
  dumpEvent(module, action, app);
};

appManager.on('configAdd', function(app) {
  processEvent('app', 'configAdd', app);
});

appManager.on('configRemove', function(app) {
  processEvent('app', 'configRemove', app);
});

appManager.on('configUpdate', function(app) {
  processEvent('app', 'configUpdate', app);
});

appManager.on('prepareComplete', function(app) {
  processEvent('app', 'prepareComplete', app);
});

appManager.on('verifyComplete', function(app) {
  processEvent('app', 'verifyComplete', app);
});

appManager.on('activateComplete', function(app) {
  processEvent('app', 'activateComplete', app);
});

repositoryListener.on('commit', function(apps) {
  _(apps).each(function(app) {
    appManager.redeploy(app);
    processEvent('repository', 'commit', app);
  });
});

var listening = false;
appManager.on('queueReady', function() {
  if (!listening) {
    listening = true;
    webApp.listen(port);
    console.log('m1deploy running at http://127.0.0.1:' + port);
  }
});
